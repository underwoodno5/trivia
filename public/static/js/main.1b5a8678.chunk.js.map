{"version":3,"sources":["components/Answers.js","App.js","serviceWorker.js","index.js"],"names":["AnswersQuery","gql","_templateObject","Answers","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counterTeamA","counterTeamB","addClass","correctAnswer","incorrectAnswer","correctStore","flipCard","turnA","firstAnswerOrder","Math","floor","random","secondAnswerOrder","thirdAnswerOrder","fourthAnswerOrder","toggle","bind","assertThisInitialized","toggleChecks","wrongAnswer","inherits","createClass","key","value","setState","console","log","_this2","fadeClass","push","flipCorrect","showCorrect","showIncorrect","react_default","a","createElement","className","react_apollo_browser_umd","query","_ref","loading","error","data","refetch","questions","results","map","_ref2","correct_answer","incorrect_answers","question","join","he","decode","type","onClick","setTimeout","style","order","xmlns","viewBox","cx","cy","r","fill","d","Component","client","ApolloClient","uri","App","components_Answers","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ohBAOA,IAAMA,EAAeC,IAAHC,KAyRHC,EA7Qf,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAc,EACdC,aAAc,EACdC,UAAU,EACVC,eAAe,EACfC,iBAAiB,EACjBC,aAAc,GACdC,UAAU,EACVC,OAAO,EACPC,iBAAkBC,KAAKC,MAAsB,GAAhBD,KAAKE,UAClCC,kBAAmBH,KAAKC,MAAsB,GAAhBD,KAAKE,UACnCE,iBAAkBJ,KAAKC,MAAsB,GAAhBD,KAAKE,UAClCG,kBAAmBL,KAAKC,MAAsB,GAAhBD,KAAKE,WAErCnB,EAAKuB,OAASvB,EAAKuB,OAAOC,KAAZvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACdA,EAAK0B,aAAe1B,EAAK0B,aAAaF,KAAlBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACpBA,EAAKW,cAAgBX,EAAKW,cAAca,KAAnBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACrBA,EAAK2B,YAAc3B,EAAK2B,YAAYH,KAAjBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACnBA,EAAKmB,OAASnB,EAAKmB,OAAOK,KAAZvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KApBGA,EADrB,OAAAC,OAAA2B,EAAA,EAAA3B,CAAAJ,EAAAC,GAAAG,OAAA4B,EAAA,EAAA5B,CAAAJ,EAAA,EAAAiC,IAAA,SAAAC,MAAA,WA0BI5B,KAAK6B,SAAS,CAAEtB,UAAWP,KAAKI,MAAMG,WACtCP,KAAK6B,SAAS,CAAElB,UAAWX,KAAKI,MAAMO,aA3B1C,CAAAgB,IAAA,SAAAC,MAAA,WAgCI5B,KAAK6B,SAAS,CACZhB,iBAAkBC,KAAKC,MAAsB,GAAhBD,KAAKE,UAClCC,kBAAmBH,KAAKC,MAAsB,GAAhBD,KAAKE,UACnCE,iBAAkBJ,KAAKC,MAAsB,GAAhBD,KAAKE,UAClCG,kBAAmBL,KAAKC,MAAsB,GAAhBD,KAAKE,cApCzC,CAAAW,IAAA,eAAAC,MAAA,WA0CI5B,KAAK6B,SAAS,CACZrB,eAAe,EACfC,iBAAiB,MA5CvB,CAAAkB,IAAA,gBAAAC,MAAA,WAkDQ5B,KAAKI,MAAMQ,OACbkB,QAAQC,IAAI,iBACZ/B,KAAK6B,SAAS,CACZxB,aAAcL,KAAKI,MAAMC,aAAe,EACxCO,OAAO,MAGTkB,QAAQC,IAAI,kBACZ/B,KAAK6B,SAAS,CACZvB,aAAcN,KAAKI,MAAME,aAAe,EACxCM,OAAO,KAGXZ,KAAK6B,SAAS,CAAElB,UAAWX,KAAKI,MAAMO,WACtCX,KAAK6B,SAAS,CAAErB,eAAgBR,KAAKI,MAAMI,kBAhE/C,CAAAmB,IAAA,cAAAC,MAAA,WAqEQ5B,KAAKI,MAAMQ,OACbkB,QAAQC,IAAI,iBACZ/B,KAAK6B,SAAS,CACZjB,OAAO,MAGTkB,QAAQC,IAAI,kBACZ/B,KAAK6B,SAAS,CACZjB,OAAO,KAGXZ,KAAK6B,SAAS,CAAEpB,iBAAkBT,KAAKI,MAAMK,oBAhFjD,CAAAkB,IAAA,SAAAC,MAAA,WAmFW,IAAAI,EAAAhC,KACHiC,EAAY,CAAC,qBACbjC,KAAKI,MAAMG,UACb0B,EAAUC,KAAK,WAGjB,IAAIC,EAAc,CAAC,YACfnC,KAAKI,MAAMO,UACbwB,EAAYD,KAAK,cAGnB,IAAIE,EAAc,CAAC,WACdpC,KAAKI,MAAMI,eACd4B,EAAYF,KAAK,QAGnB,IAAIG,EAAgB,CAAC,aAKrB,OAJKrC,KAAKI,MAAMK,iBACd4B,EAAcH,KAAK,QAInBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACE,EAAA,MAAD,CAAOC,MAAOpD,GACX,SAAAqD,GAAuC,IAApCC,EAAoCD,EAApCC,QAASC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,QACxB,OAAIH,EAAgBP,EAAAC,EAAAC,cAAA,uBAChBM,EAAcR,EAAAC,EAAAC,cAAA,kBACXO,EAAKE,UAAUC,QAAQC,IAC5B,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,eAAgBC,EAAnBF,EAAmBE,kBAAmBC,EAAtCH,EAAsCG,SAAtC,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EAAUuB,KAAK,MAC7BlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWd,IAAK4B,GAC7BjB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAIiB,IAAGC,OAAOH,KAEhBjB,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAYqB,KAAK,MAC/BlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,UACEb,IAAK0B,EACLM,KAAK,SACLC,QAAS,WACP5B,EAAKxB,gBACLwB,EAAKZ,SACLyC,WAAWb,EAAS,MAEtBP,UAAU,4BACVqB,MAAO,CAAEC,MAAO/B,EAAK5B,MAAMS,mBAE1B4C,IAAGC,OAAOL,IAEbf,EAAAC,EAAAC,cAAA,UACEb,IAAK2B,EAAkB,GACvBK,KAAK,SACLC,QAAS,WACP5B,EAAKH,SAAS,CACZnB,aAAc2C,IAEhBrB,EAAKZ,SACLY,EAAKR,cACLqC,WAAWb,EAAS,MAEtBP,UAAU,cACVqB,MAAO,CAAEC,MAAO/B,EAAK5B,MAAMa,oBAE1BwC,IAAGC,OAAOJ,EAAkB,KAE/BhB,EAAAC,EAAAC,cAAA,UACEb,IAAK2B,EAAkB,GACvBK,KAAK,SACLC,QAAS,WACP5B,EAAKH,SAAS,CACZnB,aAAc2C,IAEhBrB,EAAKZ,SACLY,EAAKR,cACLqC,WAAWb,EAAS,MAEtBP,UAAU,cACVqB,MAAO,CAAEC,MAAO/B,EAAK5B,MAAMc,mBAE1BuC,IAAGC,OAAOJ,EAAkB,KAE/BhB,EAAAC,EAAAC,cAAA,UACEb,IAAK2B,EAAkB,GACvBK,KAAK,SACLC,QAAS,WACP5B,EAAKH,SAAS,CACZnB,aAAc2C,IAEhBrB,EAAKZ,SACLY,EAAKR,cACLqC,WAAWb,EAAS,MAEtBP,UAAU,cACVqB,MAAO,CAAEC,MAAO/B,EAAK5B,MAAMe,oBAE1BsC,IAAGC,OAAOJ,EAAkB,MAGjChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAYoB,KAAK,MAC/BlB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVuB,MAAM,6BACNC,QAAQ,aAER3B,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACVyB,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,SAEP/B,EAAAC,EAAAC,cAAA,QACEC,UAAU,mBACV4B,KAAK,OACLC,EAAE,mCAIRhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAcmB,KAAK,MACjClB,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACGiB,IAAGC,OAAO1B,EAAK5B,MAAMM,cADxB,0BAIA4B,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVuB,MAAM,6BACNC,QAAQ,aAER3B,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVyB,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,SAEP/B,EAAAC,EAAAC,cAAA,QACEC,UAAU,mBACV4B,KAAK,OACLC,EAAE,gCAIRhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEmB,KAAK,SACLC,QAAS,WACPC,WAAW7B,EAAKhB,OAAQ,KACxB6C,WAAW7B,EAAKZ,OAAQ,KACxByC,WAAW7B,EAAKT,aAAc,MAEhCkB,UAAU,cAPZ,0BAqBlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,oBACCxC,KAAKI,MAAMC,cAEdiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,oBACCxC,KAAKI,MAAME,oBArQxBZ,EAAA,CAA6B6E,aCbvBC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAgBQC,mLAXX,OACErC,EAAAC,EAAAC,cAACE,EAAA,eAAD,CAAgB8B,OAAQA,GACtBlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,yBAEFH,EAAAC,EAAAC,cAACoC,EAAD,cAPUL,aCEEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b5a8678.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n//Converts HTML code to readable\nimport he from 'he';\n\n//---------- GraphQL Query\nconst AnswersQuery = gql`\n  {\n    questions {\n      results {\n        correct_answer\n        incorrect_answers\n        question\n      }\n    }\n  }\n`;\n\nexport class Answers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counterTeamA: 0,\n      counterTeamB: 0,\n      addClass: false,\n      correctAnswer: false,\n      incorrectAnswer: false,\n      correctStore: '',\n      flipCard: false,\n      turnA: true,\n      firstAnswerOrder: Math.floor(Math.random() * 10),\n      secondAnswerOrder: Math.floor(Math.random() * 10),\n      thirdAnswerOrder: Math.floor(Math.random() * 10),\n      fourthAnswerOrder: Math.floor(Math.random() * 10)\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleChecks = this.toggleChecks.bind(this);\n    this.correctAnswer = this.correctAnswer.bind(this);\n    this.wrongAnswer = this.wrongAnswer.bind(this);\n    this.random = this.random.bind(this);\n  }\n\n  //toggling state for visible objects\n  toggle() {\n    this.setState({ addClass: !this.state.addClass });\n    this.setState({ flipCard: !this.state.flipCard });\n  }\n\n  //toggling state for visible objects and randomising\n  random() {\n    this.setState({\n      firstAnswerOrder: Math.floor(Math.random() * 10),\n      secondAnswerOrder: Math.floor(Math.random() * 10),\n      thirdAnswerOrder: Math.floor(Math.random() * 10),\n      fourthAnswerOrder: Math.floor(Math.random() * 10)\n    });\n  }\n\n  //toggle off correct or incorrect\n  toggleChecks() {\n    this.setState({\n      correctAnswer: false,\n      incorrectAnswer: false\n    });\n  }\n\n  //Adding one to score and changing team state\n  correctAnswer() {\n    if (this.state.turnA) {\n      console.log('turnA is true');\n      this.setState({\n        counterTeamA: this.state.counterTeamA + 1,\n        turnA: false\n      });\n    } else {\n      console.log('turnA is false');\n      this.setState({\n        counterTeamB: this.state.counterTeamB + 1,\n        turnA: true\n      });\n    }\n    this.setState({ flipCard: !this.state.flipCard });\n    this.setState({ correctAnswer: !this.state.correctAnswer });\n  }\n\n  //changing team state\n  wrongAnswer() {\n    if (this.state.turnA) {\n      console.log('turnA is true');\n      this.setState({\n        turnA: false\n      });\n    } else {\n      console.log('turnA is false');\n      this.setState({\n        turnA: true\n      });\n    }\n    this.setState({ incorrectAnswer: !this.state.incorrectAnswer });\n  }\n\n  render() {\n    let fadeClass = ['answers-container'];\n    if (this.state.addClass) {\n      fadeClass.push('fadeOut');\n    }\n\n    let flipCorrect = ['flipcard'];\n    if (this.state.flipCard) {\n      flipCorrect.push('is-flipped');\n    }\n\n    let showCorrect = ['correct'];\n    if (!this.state.correctAnswer) {\n      showCorrect.push('hide');\n    }\n\n    let showIncorrect = ['incorrect'];\n    if (!this.state.incorrectAnswer) {\n      showIncorrect.push('hide');\n    }\n\n    return (\n      <div className='trivia-container'>\n        <Query query={AnswersQuery}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n            return data.questions.results.map(\n              ({ correct_answer, incorrect_answers, question }) => (\n                <div>\n                  <div className={fadeClass.join(' ')}>\n                    <div className='question' key={question}>\n                      <h2>-question</h2>\n                      <p>{he.decode(question)}</p>\n                    </div>\n                    <h2>-answers</h2>\n                  </div>\n                  <div className={flipCorrect.join(' ')}>\n                    <div className='flipcard'>\n                      <div className='flipcard__face flipcard__face--front'>\n                        <button\n                          key={correct_answer}\n                          type='button'\n                          onClick={() => {\n                            this.correctAnswer();\n                            this.toggle();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary correctanswer'\n                          style={{ order: this.state.firstAnswerOrder }}\n                        >\n                          {he.decode(correct_answer)}\n                        </button>\n                        <button\n                          key={incorrect_answers[0]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.secondAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[0])}\n                        </button>\n                        <button\n                          key={incorrect_answers[1]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.thirdAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[1])}\n                        </button>\n                        <button\n                          key={incorrect_answers[2]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.fourthAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[2])}\n                        </button>\n                      </div>\n                      <div className='flipcard__face flipcard__face--back'>\n                        <div className={showCorrect.join(' ')}>\n                          <h3>Correct!</h3>\n                          <svg\n                            className='checkmark'\n                            xmlns='http://www.w3.org/2000/svg'\n                            viewBox='0 0 52 52'\n                          >\n                            <circle\n                              className='checkmark__circle'\n                              cx='26'\n                              cy='26'\n                              r='25'\n                              fill='none'\n                            />\n                            <path\n                              className='checkmark__check'\n                              fill='none'\n                              d='M14.1 27.2l7.1 7.2 16.7-16.8'\n                            />\n                          </svg>\n                        </div>\n                        <div className={showIncorrect.join(' ')}>\n                          <h3>Incorrect: </h3>\n                          <p>\n                            {he.decode(this.state.correctStore)} was the right\n                            answer!\n                          </p>\n                          <svg\n                            className='exmark'\n                            xmlns='http://www.w3.org/2000/svg'\n                            viewBox='0 0 52 52'\n                          >\n                            <circle\n                              className='exmark__circle'\n                              cx='26'\n                              cy='26'\n                              r='25'\n                              fill='none'\n                            />\n                            <path\n                              className='checkmark__check'\n                              fill='none'\n                              d='M16 16 36 36 M36 16 16 36'\n                            />\n                          </svg>\n                        </div>\n                        <div>\n                          <button\n                            type='button'\n                            onClick={() => {\n                              setTimeout(this.random, 300);\n                              setTimeout(this.toggle, 500);\n                              setTimeout(this.toggleChecks, 900);\n                            }}\n                            className='flipbutton'\n                          >\n                            Next Question\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            );\n          }}\n        </Query>\n\n        <div className='score-container'>\n          <div className='score'>\n            <h2>Team A</h2>\n            {this.state.counterTeamA}\n          </div>\n          <div className='score'>\n            <h2>Team B</h2>\n            {this.state.counterTeamB}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Answers;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport './App.css';\nimport Answers from './components/Answers';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className='App'>\n          <h1 className='title'>A SIMPLE TRIVIA GAME</h1>\n        </div>\n        <Answers />\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}