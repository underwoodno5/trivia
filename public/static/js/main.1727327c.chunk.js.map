{"version":3,"sources":["components/Answers.js","App.js","serviceWorker.js","index.js"],"names":["AnswersQuery","gql","_templateObject","localStorage","setItem","Answers","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","counterTeamA","counterTeamB","teamAName","teamBName","addClass","correctAnswer","incorrectAnswer","correctStore","flipCard","turnA","showModal","firstAnswerOrder","Math","floor","random","secondAnswerOrder","thirdAnswerOrder","fourthAnswerOrder","toggle","bind","assertThisInitialized","toggleChecks","wrongAnswer","scoreReset","modal","handleSubmit","inherits","createClass","key","value","setState","console","log","event","preventDefault","elementA","elementB","_this2","fadeClass","push","flipCorrect","showCorrect","showIncorrect","modalOpen","JSON","stringify","getItem","react_default","a","createElement","className","react_apollo_browser_umd","query","_ref","loading","error","data","refetch","questions","results","map","_ref2","correct_answer","incorrect_answers","question","category","join","he","decode","type","onClick","setTimeout","style","order","xmlns","viewBox","cx","cy","r","fill","d","onSubmit","for","name","ref","el","Component","client","ApolloClient","uri","App","components_Answers","render","App_App","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1727327c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n//Converts HTML code to readable\nimport he from 'he';\n\n//---------- GraphQL Query\nconst AnswersQuery = gql`\n  {\n    questions {\n      results {\n        correct_answer\n        incorrect_answers\n        question\n        category\n      }\n    }\n  }\n`;\nlocalStorage.setItem('number', 9);\n\nexport class Answers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counterTeamA: 0,\n      counterTeamB: 0,\n      teamAName: 'Team A',\n      teamBName: 'Team B',\n      addClass: false,\n      correctAnswer: false,\n      incorrectAnswer: false,\n      correctStore: '',\n      flipCard: false,\n      turnA: true,\n      showModal: false,\n      firstAnswerOrder: Math.floor(Math.random() * 10),\n      secondAnswerOrder: Math.floor(Math.random() * 10),\n      thirdAnswerOrder: Math.floor(Math.random() * 10),\n      fourthAnswerOrder: Math.floor(Math.random() * 10)\n    };\n    this.toggle = this.toggle.bind(this);\n    this.toggleChecks = this.toggleChecks.bind(this);\n    this.correctAnswer = this.correctAnswer.bind(this);\n    this.wrongAnswer = this.wrongAnswer.bind(this);\n    this.random = this.random.bind(this);\n    this.scoreReset = this.scoreReset.bind(this);\n    this.modal = this.modal.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  //toggling state for visible objects\n  toggle() {\n    this.setState({\n      addClass: !this.state.addClass,\n      flipCard: !this.state.flipCard\n    });\n  }\n\n  //toggle modal\n  modal() {\n    this.setState({\n      showModal: !this.state.showModal\n    });\n    console.log(this.state.showModal);\n  }\n\n  //toggling state for visible objects and randomising\n  random() {\n    this.setState({\n      firstAnswerOrder: Math.floor(Math.random() * 10),\n      secondAnswerOrder: Math.floor(Math.random() * 10),\n      thirdAnswerOrder: Math.floor(Math.random() * 10),\n      fourthAnswerOrder: Math.floor(Math.random() * 10)\n    });\n  }\n\n  scoreReset() {\n    this.setState({\n      counterTeamA: 0,\n      counterTeamB: 0\n    });\n  }\n\n  //toggle off correct or incorrect\n  toggleChecks() {\n    this.setState({\n      correctAnswer: false,\n      incorrectAnswer: false\n    });\n  }\n\n  //Adding one to score and changing team state\n  correctAnswer() {\n    if (this.state.turnA) {\n      console.log('turnA is true');\n      this.setState({\n        counterTeamA: this.state.counterTeamA + 1,\n        turnA: false\n      });\n    } else {\n      console.log('turnA is false');\n      this.setState({\n        counterTeamB: this.state.counterTeamB + 1,\n        turnA: true\n      });\n    }\n    this.setState({ flipCard: !this.state.flipCard });\n    this.setState({ correctAnswer: !this.state.correctAnswer });\n  }\n\n  //changing team state\n  wrongAnswer() {\n    if (this.state.turnA) {\n      console.log('turnA is true');\n      this.setState({\n        turnA: false\n      });\n    } else {\n      console.log('turnA is false');\n      this.setState({\n        turnA: true\n      });\n    }\n    this.setState({ incorrectAnswer: !this.state.incorrectAnswer });\n  }\n\n  //handle form enter\n  handleSubmit(event) {\n    console.log('yes');\n    event.preventDefault();\n    this.setState({\n      teamAName: this.elementA.value,\n      teamBName: this.elementB.value,\n      showModal: !this.state.showModal\n    });\n    \n  }\n\n  render() {\n    let fadeClass = ['answers-container'];\n    if (this.state.addClass) {\n      fadeClass.push('fadeOut');\n    }\n\n    let flipCorrect = ['flipcard'];\n    if (this.state.flipCard) {\n      flipCorrect.push('is-flipped');\n    }\n\n    let showCorrect = ['correct'];\n    if (!this.state.correctAnswer) {\n      showCorrect.push('hide');\n    }\n\n    let showIncorrect = ['incorrect'];\n    if (!this.state.incorrectAnswer) {\n      showIncorrect.push('hide');\n    }\n    let modalOpen = ['modal'];\n    if (!this.state.showModal) {\n      modalOpen.push('hide-modal');\n    }\n\n    console.log('the name is ' + JSON.stringify(localStorage.getItem('name')));\n\n    return (\n      <div className='trivia-container'>\n        <Query query={AnswersQuery}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n            return data.questions.results.map(\n              ({ correct_answer, incorrect_answers, question, category }) => (\n                <div>\n                  <div className={fadeClass.join(' ')}>\n                    <div className='question' key={question}>\n                      <h2>-{category}</h2>\n                      <p>{he.decode(question)}</p>\n                    </div>\n                    <h2>-answers</h2>\n                  </div>\n                  <div className={flipCorrect.join(' ')}>\n                    <div className='flipcard'>\n                      <div className='flipcard__face flipcard__face--front'>\n                        <button\n                          key={correct_answer}\n                          type='button'\n                          onClick={() => {\n                            this.correctAnswer();\n                            this.toggle();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary correctanswer'\n                          style={{ order: this.state.firstAnswerOrder }}\n                        >\n                          {he.decode(correct_answer)}\n                        </button>\n                        <button\n                          key={incorrect_answers[0]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.secondAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[0])}\n                        </button>\n                        <button\n                          key={incorrect_answers[1]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.thirdAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[1])}\n                        </button>\n                        <button\n                          key={incorrect_answers[2]}\n                          type='button'\n                          onClick={() => {\n                            this.setState({\n                              correctStore: correct_answer\n                            });\n                            this.toggle();\n                            this.wrongAnswer();\n                            setTimeout(refetch, 500);\n                          }}\n                          className='btn-primary'\n                          style={{ order: this.state.fourthAnswerOrder }}\n                        >\n                          {he.decode(incorrect_answers[2])}\n                        </button>\n                      </div>\n                      <div className='flipcard__face flipcard__face--back'>\n                        <div className={showCorrect.join(' ')}>\n                          <h3>Correct!</h3>\n                          <svg\n                            className='checkmark'\n                            xmlns='http://www.w3.org/2000/svg'\n                            viewBox='0 0 52 52'\n                          >\n                            <circle\n                              className='checkmark__circle'\n                              cx='26'\n                              cy='26'\n                              r='25'\n                              fill='none'\n                            />\n                            <path\n                              className='checkmark__check'\n                              fill='none'\n                              d='M14.1 27.2l7.1 7.2 16.7-16.8'\n                            />\n                          </svg>\n                        </div>\n                        <div className={showIncorrect.join(' ')}>\n                          <h3>Incorrect: </h3>\n                          <p>\n                            {he.decode(this.state.correctStore)} was the right\n                            answer!\n                          </p>\n                          <svg\n                            className='exmark'\n                            xmlns='http://www.w3.org/2000/svg'\n                            viewBox='0 0 52 52'\n                          >\n                            <circle\n                              className='exmark__circle'\n                              cx='26'\n                              cy='26'\n                              r='25'\n                              fill='none'\n                            />\n                            <path\n                              className='checkmark__check'\n                              fill='none'\n                              d='M16 16 36 36 M36 16 16 36'\n                            />\n                          </svg>\n                        </div>\n                        <div>\n                          <button\n                            type='button'\n                            onClick={() => {\n                              setTimeout(this.random, 300);\n                              setTimeout(this.toggle, 500);\n                              setTimeout(this.toggleChecks, 900);\n                            }}\n                            className='flipbutton'\n                          >\n                            Next Question\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            );\n          }}\n        </Query>\n\n        <div>\n          <div className='options'>\n            <button onClick={this.modal}>\n              <i className='fas fa-cog' />\n            </button>\n          </div>\n          <div className={modalOpen.join(' ')}>\n            <div className='modal-content'>\n              <span className='close'>\n                <button onClick={this.modal}>&times;</button>\n              </span>\n              <form onSubmit={this.handleSubmit}>\n              <label className=\"col-form-label col-form-label-sm\" for=\"inputSmall\">Team Names</label>\n                <input\n                  type='text'\n                  name='teamA'\n                  className='form-control form-control-sm'\n                  ref={el => (this.elementA = el)}\n                />\n                <input\n                  type='text'\n                  name='teamB'\n                  className='form-control form-control-sm'\n                  ref={el => (this.elementB = el)}\n                />\n                <input type='submit' value='Submit' className='btn btn-primary' />\n              </form>\n              <button\n          className='score-reset btn btn-danger'\n          onClick={this.scoreReset}\n        >\n          Reset scores\n        </button>\n            </div>\n          </div>\n        </div>\n\n        <div className='score-container'>\n          <div className='score'>\n            <h2>{this.state.teamAName}</h2>\n            {this.state.counterTeamA}\n          </div>\n          <div className='score'>\n            <h2>{this.state.teamBName}</h2>\n            {this.state.counterTeamB}\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Answers;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport './App.css';\nimport Answers from './components/Answers';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <div className='App'>\n      <h1 className='title'>A SIMPLE TRIVIA GAME</h1>\n    </div>\n    <Answers />\n  </ApolloProvider>\n);\n\nrender(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}